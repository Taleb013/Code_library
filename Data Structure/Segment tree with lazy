const int N=2e5+2;
ll seg[4*N],ar[N],lazy[4*N];
void build(int ind,int low,int high)
{
    if(low==high)
    {
        seg[ind]=ar[low];
        lazy[ind]=0;
        return;
    }
    int mid=(low+high)/2;
    build(2*ind+1,low,mid);
    build(2*ind+2,mid+1,high);
    lazy[ind]=0;
    seg[ind]=min(seg[ind*2+1],seg[ind*2+2]);
}
void rangeupdate(ll ind,ll low,ll high,ll l,ll r,ll val)
{
    if(lazy[ind]!=0)
    {
        seg[ind]+=lazy[ind];
        if(low!=high)
        {
            lazy[2*ind+1]+=lazy[ind];
            lazy[2*ind+2]+=lazy[ind];
        }
        lazy[ind]=0;
    }
    if(r<low||l>high||low>high)
    {
        return;
    }
    if(low>=l&&high<=r)
    {
        seg[ind]+=val;
        if(low!=high)
        {
            lazy[2*ind+1]+=val;
            lazy[2*ind+2]+=val;
        }
        return;
    }
    ll mid=(low+high)/2;
    rangeupdate(2*ind+1,low,mid,l,r,val);
    rangeupdate(2*ind+2,mid+1,high,l,r,val);
    seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
}
ll lazysum(ll ind,ll low,ll high,ll l,ll r)
{
    if(lazy[ind]!=0)
    {
        seg[ind]+=lazy[ind];
        if(low!=high)
        {
            lazy[2*ind+1]+=lazy[ind];
            lazy[2*ind+2]+=lazy[ind];
        }
        lazy[ind]=0;
    }
    if(low>=l&&high<=r)
    {
        return seg[ind];
    }
    if(high<l||low>r)
    {
        return INT_MAX;
    }
    ll mid=(low+high)/2;
    ll left=lazysum(ind*2+1,low,mid,l,r);
    ll right=lazysum(ind*2+2,mid+1,high,l,r);
    return min(left,right);
}
