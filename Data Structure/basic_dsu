#include <bits/stdc++.h>
using namespace std;

class DSU {
private:
    vector<int> parent, rank;

public:
    DSU(int n) {
        parent.resize(n + 1);
        rank.resize(n + 1, 1);
        for (int i = 1; i <= n; ++i) {
            parent[i] = i; // Initially, each element is its own parent
        }
    }

    int find(int x) {
        if (x != parent[x]) {
            parent[x] = find(parent[x]); // Path compression
        }
        return parent[x];
    }

    void unite(int u, int v) {
        int root_u = find(u);
        int root_v = find(v);

        if (root_u != root_v) {
            // Union by rank
            if (rank[root_u] < rank[root_v]) {
                swap(root_u, root_v);
            }
            parent[root_v] = root_u;
            if (rank[root_u] == rank[root_v]) {
                rank[root_u]++;
            }
        }
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, m;
    cin >> n >> m;

    DSU dsu(n);
    string query;
    int u, v;

    while (m--) {
        cin >> query >> u >> v;
        if (query == "union") {
            dsu.unite(u, v);
        } else if (query == "get") {
            if (dsu.find(u) == dsu.find(v)) {
                cout << "YES\n";
            } else {
                cout << "NO\n";
            }
        }
    }

    return 0;
}
